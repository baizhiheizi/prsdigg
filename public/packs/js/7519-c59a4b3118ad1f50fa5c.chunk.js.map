{"version":3,"sources":["webpack://prsdigg/./node_modules/@ant-design/icons-svg/es/asn/PlusOutlined.js","webpack://prsdigg/./node_modules/@ant-design/icons/es/icons/PlusOutlined.js","webpack://prsdigg/./app/packs/apps/dashboard/components/EditableTagsComponent/EditableTagsComponent.tsx","webpack://prsdigg/./app/packs/apps/dashboard/components/UploadComponent/UploadComponent.tsx","webpack://prsdigg/./app/packs/apps/dashboard/pages/ArticleEditPage/ArticleEditPage.tsx"],"names":["props","ref","AntdIcon","Object","assign","icon","displayName","EditableTagsComponent","tags","setTags","useState","inputVisible","setInputVisible","inputValue","setInputValue","editInputIndex","setEditInputIndex","editInputValue","setEditInputValue","inputRef","useRef","editInputRef","useEffect","current","focus","handleInputConfirm","indexOf","handleEditInputConfirm","newTags","map","tag","index","style","width","marginRight","verticalAlign","size","key","value","onChange","e","target","onBlur","onPressEnter","isLongTag","length","tagElem","closable","onClose","removedTag","filter","onDoubleClick","preventDefault","slice","title","type","background","borderStyle","onClick","UploadComponent","attachmentEndpoint","usePrsdigg","className","id","accept","multiple","event","Array","from","files","forEach","file","upload","blob","url","callback","ArticleEditPage","uuid","useParams","form","editedPrice","setEditedPrice","history","useHistory","t","useTranslation","useMyArticleQuery","fetchPolicy","variables","data","loading","useUpdateArticleMutation","update","_","err","updateArticle","error","replace","updating","myArticle","tagNames","breadcrumb","routes","path","breadcrumbName","itemRender","route","_params","_paths","to","setFieldsValue","content","getFieldValue","filename","initialValues","intro","price","assetId","labelCol","span","wrapperCol","onFinish","values","centered","okText","cancelText","onOk","input","display","name","label","placeholder","textareaProps","previewOptions","markdownPreviewOptions","autoFocus","preview","height","commands","uploadCommand","extra","currency","priceUsd","toFixed","noStyle","rules","required","validator","symbol","Promise","resolve","reject","disabled","parseFloat","toString","minWidth","min","step","precision","src","iconUrl","readersRevenueRatio","formatter","platformRevenueRatio","authorRevenueRatio","Math","floor","articleReferences","articleReference","reference","author","avatar","href","revenueRatio","xs","offset","sm","htmlType"],"mappings":"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","file":"js/7519-c59a4b3118ad1f50fa5c.chunk.js","sourcesContent":["// This icon file is generated automatically.\nvar PlusOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"defs\", \"attrs\": {}, \"children\": [{ \"tag\": \"style\", \"attrs\": {} }] }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z\" } }] }, \"name\": \"plus\", \"theme\": \"outlined\" };\nexport default PlusOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport PlusOutlinedSvg from \"@ant-design/icons-svg/es/asn/PlusOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar PlusOutlined = function PlusOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: PlusOutlinedSvg\n  }));\n};\n\nPlusOutlined.displayName = 'PlusOutlined';\nexport default /*#__PURE__*/React.forwardRef(PlusOutlined);","import { PlusOutlined } from '@ant-design/icons';\nimport { Input, Tag, Tooltip } from 'antd';\nimport React, { useEffect, useRef, useState } from 'react';\n\nexport default function EditableTagsComponent(props: {\n  tags: string[];\n  setTags: (tags: string[]) => any;\n}) {\n  const { tags, setTags } = props;\n  const [inputVisible, setInputVisible] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [editInputIndex, setEditInputIndex] = useState(-1);\n  const [editInputValue, setEditInputValue] = useState('');\n  const inputRef = useRef(null);\n  const editInputRef = useRef(null);\n\n  useEffect(() => {\n    if (inputVisible) {\n      inputRef.current.focus();\n    }\n  }, [inputVisible]);\n\n  useEffect(() => {\n    if (editInputIndex !== -1) {\n      editInputRef.current.focus();\n    }\n  }, [editInputIndex]);\n\n  const handleRemove = (removedTag: string) =>\n    setTags(tags.filter((tag) => tag !== removedTag));\n\n  const handleInputConfirm = () => {\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      setTags([...tags, inputValue]);\n    }\n    setInputValue('');\n    setInputVisible(false);\n  };\n\n  const handleEditInputConfirm = () => {\n    const newTags = [...tags];\n    newTags[editInputIndex] = editInputValue;\n    setTags(newTags);\n    setEditInputValue('');\n    setEditInputIndex(-1);\n  };\n\n  return (\n    <div>\n      {tags.map((tag, index) => {\n        if (editInputIndex === index) {\n          return (\n            <Input\n              ref={editInputRef}\n              style={{ width: 78, marginRight: 8, verticalAlign: 'top' }}\n              size='small'\n              key={tag}\n              value={editInputValue}\n              onChange={(e) => setEditInputValue(e.target.value)}\n              onBlur={handleEditInputConfirm}\n              onPressEnter={handleEditInputConfirm}\n            />\n          );\n        }\n\n        const isLongTag = tag.length > 20;\n\n        const tagElem = (\n          <Tag key={tag} closable onClose={() => handleRemove(tag)}>\n            <span\n              onDoubleClick={(e) => {\n                if (index !== 0) {\n                  setEditInputIndex(index);\n                  setEditInputValue(tag);\n                  editInputRef.current.focus();\n                  e.preventDefault();\n                }\n              }}\n            >\n              #{isLongTag ? `${tag.slice(0, 20)}...` : tag}\n            </span>\n          </Tag>\n        );\n\n        return isLongTag ? (\n          <Tooltip title={tag} key={tag}>\n            {tagElem}\n          </Tooltip>\n        ) : (\n          tagElem\n        );\n      })}\n      {inputVisible && (\n        <Input\n          ref={inputRef}\n          style={{ width: 78, marginRight: 8, verticalAlign: 'top' }}\n          size='small'\n          type='text'\n          value={inputValue}\n          onChange={(e) => setInputValue(e.target.value)}\n          onBlur={handleInputConfirm}\n          onPressEnter={handleInputConfirm}\n        />\n      )}\n      {!inputVisible && (\n        <Tag\n          style={{\n            background: '#fff',\n            borderStyle: 'dashed',\n          }}\n          onClick={() => setInputVisible(true)}\n        >\n          <PlusOutlined /> New Tag\n        </Tag>\n      )}\n    </div>\n  );\n}\n","import { message } from 'antd';\nimport { upload, usePrsdigg } from 'apps/shared';\nimport React from 'react';\n\nexport default function UploadComponent(props: {\n  callback: (params: any) => any;\n}) {\n  const { attachmentEndpoint } = usePrsdigg();\n  return (\n    <input\n      className='hidden'\n      id='upload-image-input'\n      type='file'\n      accept='image/*'\n      multiple\n      onChange={(event) => {\n        Array.from(event.target.files).forEach((file) => {\n          message.loading('...');\n          upload(file, (blob) => {\n            blob.url = `${attachmentEndpoint}/${blob.key}`;\n            props.callback(blob);\n            message.destroy();\n          });\n        });\n      }}\n    />\n  );\n}\n","import Editor, { commands } from '@uiw/react-md-editor';\nimport {\n  Avatar,\n  Button,\n  Form,\n  Input,\n  InputNumber,\n  message,\n  Modal,\n  PageHeader,\n  Select,\n  Space,\n} from 'antd';\nimport LoadingComponent from 'apps/dashboard/components/LoadingComponent/LoadingComponent';\nimport { markdownPreviewOptions, uploadCommand } from 'apps/shared';\nimport { useMyArticleQuery, useUpdateArticleMutation } from 'graphqlTypes';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport EditableTagsComponent from '../../components/EditableTagsComponent/EditableTagsComponent';\nimport UploadComponent from '../../components/UploadComponent/UploadComponent';\n\nexport default function ArticleEditPage() {\n  const { uuid } = useParams<{ uuid: string }>();\n  const [form] = Form.useForm();\n  const [editedPrice, setEditedPrice] = useState(0);\n  const history = useHistory();\n  const { t } = useTranslation();\n  const [tags, setTags] = useState<string[]>([]);\n  const { data, loading } = useMyArticleQuery({\n    fetchPolicy: 'network-only',\n    variables: { uuid },\n  });\n  const [updateArticle, { loading: updating }] = useUpdateArticleMutation({\n    update(\n      _,\n      {\n        data: {\n          updateArticle: { error: err },\n        },\n      },\n    ) {\n      if (err) {\n        message.error(err);\n      } else {\n        message.success(t('success_submitted'));\n        history.replace(`/articles/${uuid}`);\n      }\n    },\n  });\n\n  useEffect(() => {\n    setTags(data?.myArticle?.tagNames || []);\n  }, [data]);\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const { myArticle } = data;\n\n  return (\n    <div>\n      <PageHeader\n        title={t('edit_article')}\n        breadcrumb={{\n          routes: [\n            { path: '/articles', breadcrumbName: t('articles_manage') },\n            { path: `/articles/${uuid}`, breadcrumbName: myArticle.title },\n            { path: '', breadcrumbName: t('edit_article') },\n          ],\n          itemRender: (route, _params, routes, _paths) => {\n            const last = routes.indexOf(route) === routes.length - 1;\n            return last ? (\n              <span>{route.breadcrumbName}</span>\n            ) : (\n              <Link to={route.path}>{route.breadcrumbName}</Link>\n            );\n          },\n        }}\n      />\n      <UploadComponent\n        callback={(blob) => {\n          form.setFieldsValue({\n            content: `${form.getFieldValue('content')}\\n![${blob.filename}](${\n              blob.url\n            })\\n`,\n          });\n        }}\n      />\n      <Form\n        form={form}\n        initialValues={{\n          uuid,\n          title: myArticle.title,\n          intro: myArticle.intro,\n          content: myArticle.content,\n          price: myArticle.price,\n          assetId: myArticle.assetId,\n        }}\n        labelCol={{ span: 2 }}\n        wrapperCol={{ span: 22 }}\n        onFinish={(values) => {\n          const { uuid, title, content, price, intro } = values;\n          if (\n            !title ||\n            !content ||\n            (price !== myArticle.price && !price) ||\n            !intro\n          ) {\n            message.warn(t('article.form.not_finished'));\n          } else {\n            Modal.confirm({\n              title: t('article.form.confirm_to_update'),\n              centered: true,\n              okText: t('update'),\n              cancelText: t('later'),\n              onOk: () =>\n                updateArticle({\n                  variables: {\n                    input: {\n                      uuid,\n                      title,\n                      content,\n                      price,\n                      intro,\n                      tagNames: tags,\n                    },\n                  },\n                }),\n            });\n          }\n        }}\n      >\n        <Form.Item style={{ display: 'none' }} name='uuid'>\n          <Input />\n        </Form.Item>\n        <Form.Item label={t('article.title')} name='title'>\n          <Input placeholder={t('article.form.title_place_holder')} />\n        </Form.Item>\n        <Form.Item label={t('article.content')} name='content'>\n          <Editor\n            textareaProps={{\n              placeholder: t('article.form.content_place_holder'),\n            }}\n            previewOptions={{ ...markdownPreviewOptions }}\n            autoFocus={false}\n            preview='edit'\n            height={500}\n            commands={[\n              commands.bold,\n              commands.italic,\n              commands.quote,\n              commands.hr,\n              commands.title,\n              commands.divider,\n              commands.link,\n              commands.code,\n              uploadCommand,\n              commands.divider,\n              commands.codeEdit,\n              commands.codePreview,\n            ]}\n          />\n        </Form.Item>\n        <Form.Item label={t('article.intro')} name='intro'>\n          <Input.TextArea placeholder={t('article.form.intro_place_holder')} />\n        </Form.Item>\n        <Form.Item label={t('article.tags')}>\n          <EditableTagsComponent tags={tags} setTags={setTags} />\n        </Form.Item>\n        <Form.Item\n          label={t('article.price')}\n          extra={`≈ $${(\n            myArticle.currency.priceUsd * (editedPrice || myArticle.price)\n          ).toFixed(4)}`}\n        >\n          <Space>\n            <Form.Item\n              name='price'\n              noStyle\n              rules={[\n                { required: true },\n                {\n                  validator: (_, value) => {\n                    if (\n                      myArticle.currency.symbol === 'BTC' &&\n                      value >= 0.000_001\n                    ) {\n                      return Promise.resolve();\n                    } else if (myArticle.price == value) {\n                      return Promise.resolve();\n                    } else {\n                      return Promise.reject(t('article.form.price_is_too_low'));\n                    }\n                  },\n                },\n              ]}\n            >\n              <InputNumber\n                disabled={myArticle.price === 0.0}\n                onChange={(value) =>\n                  setEditedPrice(parseFloat(value.toString()))\n                }\n                style={{ minWidth: 130 }}\n                min={0.000_001}\n                step='0.000001'\n                precision={6}\n                placeholder='0.0'\n              />\n            </Form.Item>\n            <Form.Item name='assetId' noStyle rules={[{ required: true }]}>\n              <Select disabled>\n                <Select.Option\n                  key={myArticle.currency.assetId}\n                  value={myArticle.currency.assetId}\n                >\n                  <Space>\n                    <Avatar size='small' src={myArticle.currency.iconUrl} />\n                    {myArticle.currency.symbol}\n                  </Space>\n                </Select.Option>\n              </Select>\n            </Form.Item>\n          </Space>\n        </Form.Item>\n        <Form.Item label={t('article.form.revenue_distribution')}>\n          <Form.Item label={t('readers_revenue')}>\n            <InputNumber\n              disabled\n              value={myArticle.readersRevenueRatio}\n              formatter={(value) => `${value * 100}%`}\n            />\n          </Form.Item>\n          <Form.Item label={t('platform_revenue')}>\n            <InputNumber\n              disabled\n              value={myArticle.platformRevenueRatio}\n              formatter={(value) => `${value * 100}%`}\n            />\n          </Form.Item>\n          <Form.Item label={t('author_revenue')}>\n            <InputNumber\n              disabled\n              value={myArticle.authorRevenueRatio}\n              formatter={(value) => `${Math.floor(value * 100)}%`}\n            />\n          </Form.Item>\n          {myArticle.articleReferences.length > 0 && (\n            <Form.Item label={t('article_references')}>\n              {myArticle.articleReferences.map((articleReference) => (\n                <Form.Item key={articleReference.reference.uuid}>\n                  <div className='flex flex-wrap items-center'>\n                    <Avatar\n                      className='mr-2'\n                      size='small'\n                      src={articleReference.reference.author.avatar}\n                    />\n                    <span className='mr-2'>\n                      {articleReference.reference.author.name}:\n                    </span>\n                    <a\n                      href={`/articles/${articleReference.reference.uuid}`}\n                      target='_blank'\n                    >\n                      {articleReference.reference.title}\n                    </a>\n                    <div className='ml-auto text-blue-500'>\n                      {articleReference.revenueRatio * 100}%\n                    </div>\n                  </div>\n                </Form.Item>\n              ))}\n            </Form.Item>\n          )}\n        </Form.Item>\n        <Form.Item wrapperCol={{ xs: { offset: 0 }, sm: { offset: 2 } }}>\n          <Button type='primary' htmlType='submit' loading={updating}>\n            {t('update')}\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n"],"sourceRoot":""}